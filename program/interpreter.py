from pyfinite import ffield  # Required for the GF(256) multiplications

num_meas = 100
delta = 16
k = [[x for x in range(256)] for y in range(16)]


s = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
        ]

# def full_attack():
    #round_1_attack()




def round_1_attack():

    for l in range(0, num_meas):

        meas_file = open("results/meas#" + str(l) + ".out", "r")
        vic_file = open("results/victim#" + str(l) + ".out", "r")

        first = vic_file.readline()
        first = first[:-2]

        plaintext = [int(i) for i in first.split('.')]
        tables = [int(i) for i in vic_file]

        results = [int(i) for i in meas_file]

        meas_file.close()
        vic_file.close()

        #print( plaintext)

        u_lines = []
        for index, item in enumerate(results):
            if item < 500:
                u_lines.append(index) 

        # print (u_lines)
        
        for ti, table in enumerate (tables):
            for j in range(0,4):
                # print("iteration:" + str(l))
                for hki in range(0,256):
                    hacc = plaintext[ti + j*4] ^ hki
                    # print("\t hki:" + str(hki) + "X" + str(plaintext[ti+j*4])  + " -> " + str(hacc))
                    line_hacc = (table + (hacc//delta)) % 64
                    # print("\t \t +" + str(line_hacc))
                    if line_hacc in u_lines:
                        k[ti + j*4][hki] = -1
                        # print ("$" + str(ti+j*4))

    for i , ki in enumerate (k):
        print (">> k" + str(i))
        for elem in ki:
            if elem != -1:
                print (elem)

def round_2_attack():

    F = ffield.FField(8)
    high_hkA = 240
    high_hkB = 240
    high_hkC = 240
    high_hkD = 240
    lk = [x for x in range(65536)]

    for l in range(0, num_meas):

        meas_file = open("results/meas#" + str(l) + ".out", "r")
        vic_file = open("results/victim#" + str(l) + ".out", "r")

        first = vic_file.readline()
        first = first[:-2]

        p = [int(i) for i in first.split('.')]
        tables = [int(i) for i in vic_file]

        results = [int(i) for i in meas_file]

        meas_file.close()
        vic_file.close()

        #print( plaintext)

        u_lines = []
        for index, item in enumerate(results):
            if item < 500:
                u_lines.append(index) 
# all the key combination structure, ie: 64 combinations ** 4 key bytes * 4 lines

        # WARNING experiment only for ko , k5 , k10, k15 in Te2
        for low_hkA in range(0, 16):
            for low_hkB in range(0, 16):
                for low_hkC in range(0, 16):
                    for low_hkD in range(0, 16):
                        hkA = high_hkA + low_hkA
                        hkB = high_hkB + low_hkB
                        hkC = high_hkC + low_hkC
                        hkD = high_hkD + low_hkD

                        hx = s[p[0] ^ hkA] ^ s[p[5] ^ hkB] ^ F.Multiply(2, s[p[10]^hkC] ) ^ F.Multiply(3, s[p[15]^hkD] ) ^ s[hkD] ^ 240
                        #print("hx:"+str(hx))
                        line_hx = (tables[2] + (hx//delta)) % 64

                        if line_hx in u_lines:
                            lk[(low_hkA<<12) + (low_hkB<<8) + (low_hkC<<4) + low_hkD ] = -1

    for index , lk_item in enumerate (lk):
        if lk_item !=1:
            print(lk_item)
            #print(lk_item>>12 & 0xf + lk_item>>8 & 0xf + lk_item>>4 & 0xf + lk_item>>0 & 0xf)   this is not quite right


round_2_attack()